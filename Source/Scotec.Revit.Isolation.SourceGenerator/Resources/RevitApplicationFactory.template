using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Loader;
using Autodesk.Revit.UI;
using Scotec.Revit.Isolation;
using {2};

namespace {0}
{{
    /// <summary>
    /// Auto-generated factory to create instances of type <see RevitTestApp/>.
    /// </summary>
    public class {1}Factory : IExternalApplication
    {{
        private IExternalApplication _instance;
                                        
        public {1}Factory()
        {{
            var contextName = "{3}";
            if(string.IsNullOrEmpty(contextName))
            {{
				contextName = Assembly.GetExecutingAssembly().GetName().Name;
			}}
            var context = AssemblyLoadContext.All.FirstOrDefault(c => c.Name == contextName);
            if (context == null)
			{{
                var resolver = new AssemblyDependencyResolver(Assembly.GetExecutingAssembly().Location);
                context = new RevitAssemblyLoadContext(contextName, resolver);
			}}

            var assembly = context.LoadFromAssemblyPath(Assembly.GetExecutingAssembly().Location);
            //using var scope = AssemblyLoadContext.EnterContextualReflection(assembly);
            var types = assembly.GetTypes();
            var type = types.First(type => type.Name == "{1}");
            _instance = (IExternalApplication)Activator.CreateInstance(type);
        }}
                                    
        public Result OnStartup(UIControlledApplication application)
        {{
            //using var scope = AssemblyLoadContext.EnterContextualReflection(_instance.GetType().Assembly);
            return _instance.OnStartup(application);
        }}
                                    
        public Result OnShutdown(UIControlledApplication application)
        {{
            //using var scope = AssemblyLoadContext.EnterContextualReflection(_instance.GetType().Assembly);
            return _instance.OnShutdown(application);
        }}
    }}
}}
