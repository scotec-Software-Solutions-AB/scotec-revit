using System;
using System.IO;
using System.Reflection;
using System.Runtime.Loader;
using System.Runtime.CompilerServices;

namespace {0}
{{
    internal class AddinLoadContext : AssemblyLoadContext
    {{
        private readonly AssemblyDependencyResolver _resolver;

        public AddinLoadContext(string addinPath)
        {{
            _resolver = new AssemblyDependencyResolver(Assembly.GetExecutingAssembly().Location);
        }}

        public static AddinLoadContext Instance {{ get; private set;}}

        [ModuleInitializer]
        public static void Initialize()
        {{
            var location = Assembly.GetExecutingAssembly().Location;
            var path = Path.GetDirectoryName(location)!;
            if(AssemblyLoadContext.GetLoadContext(Assembly.GetExecutingAssembly()) == AssemblyLoadContext.Default)
            {{
                Instance = new AddinLoadContext(path);
            }}
        }}

        protected override Assembly Load(AssemblyName assemblyName)
        {{
            var assemblyPath = _resolver.ResolveAssemblyToPath(assemblyName);
            if (assemblyPath != null)
            {{
                return LoadFromAssemblyPath(assemblyPath);
            }}

            return null;
        }}

        protected override IntPtr LoadUnmanagedDll(string unmanagedDllName)
        {{
            var libraryPath = _resolver.ResolveUnmanagedDllToPath(unmanagedDllName);
            if (libraryPath != null)
            {{
                return LoadUnmanagedDllFromPath(libraryPath);
            }}

            return IntPtr.Zero;
        }}
    }}
}}
